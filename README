Implementation of Blue Bite tag handling API (exercise)

NB: All commands presume creation and activation of virtual environment


Requirements
============

Postgres 10.3
Python 3.6

Setup
=====

Run scripts/setup.sh
-   presumes python3 


Activate virtual environment

    source env/bin/activate


Install requirements:

    pip install --upgrade pip
    ./scripts/requirements.sh



Database
--------

Provide credentials to local postgres installation:

    In alembic.ini, edit "sqlalchemy.url" to provide a credential string for your local postgres installation


Create database on local postgres environment

    psql -f scripts/create_blue_bite.sql

Create user 'exerciser' with access to that database:

    psql -f scripts/create_group_bb_users.sql
    psql -f scripts/create_user_exerciser.sql



Run migration

    alembic upgrade head


Run app
=======

To run the app server on local host:

    ./tagger_app.py


POST Data
=========

To enter data via POST:

    run app (above)
    bash scripts/example_requests/submit_data.curl
    


Sample Data
===========

To populate database with data from examples:

    ./scripts/load_sample_data.sh


To demonstrate app / API interface
----------------------------------

tagger_app.py must be running for the following.

See scripts/example_requests for curl code to list vendors, list tags, post
data, and get a particular tag.  Output of the requests is documented in the
various *out files.

API returns are also available in a browser (or Postman):

To see listing of vendor ids:

    127.0.0.1:8000/vendors


List of tag ids:

    127.0.0.1:8000/tags

The following endpoints are supported:

    GET
        http://127.0.0.1:8000/tags/f20e286156fa464cb3116fa70eae55b7
        http://127.0.0.1:8000/tags
        http://127.0.0.1:8000/vendors
        http://127.0.0.1:8000/tags/query?{"key":"color","value":"white"}
        - when requested from firefox and postman; has query string issues from
          curl and wget

    POST
        http://127.0.0.1:8000/tags
        - JSON in request body; limit on data handled
        - gets HTTP error on invalid schema 


Run tests
=========

    nosetests

Note that tests depend on load of data from file 
5d207da03b0040578e4c5160597357b7-pretty.json
